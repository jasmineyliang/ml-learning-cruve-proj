# -*- coding: utf-8 -*-
"""Copy of HW1_modified.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lh7KT8OSuvp0isSmzyUyh8ZR97MXpnL7
"""

# Q1 = 144

import sklearn.neural_network
import numpy
import matplotlib.pyplot as plt
import numpy as np
import itertools 

def test_NN(Ts, Hs, max_iter=2000):
    NN = sklearn.neural_network.MLPRegressor(
        hidden_layer_sizes=(4,4), 
        activation='tanh', 
        random_state = 1, 
        max_iter=max_iter
        )
    Ts = Ts.reshape(-1, 1) # learned from error
    NN.fit(Ts, Hs)
#     predictions = NN.predict(Ts)
    score = NN.score(Ts, Hs)
    return score

def learning_curve(Ts, Hs, filename):
    max_iters, scores = None, None # place holder 
    # INSERT YOUR CODE HERE
    scores = np.zeros(40)
    max_iters = np.linspace(50,2000,40)
    for i in range(0, 40):
      count = i*50+50
      scores[i] = test_NN(Ts, Hs, count)
    plt.plot(max_iters,scores)
    plt.savefig(str(filename))

    return max_iters, scores

def self_checker(*args): 
    X, y = learning_curve(*args)
    print (type(X), X)
    print (type(y), y)
    import hashlib
    print (hashlib.md5(open(args[2], "rb").read()).hexdigest())

def f(a, b, c):
    """
    a, b: 1-D numpy.ndarray
    c: str, placeholder
    """
    return a+b, a-b, a*b

if __name__ == "__main__":
    import warnings
    warnings.filterwarnings("ignore")

    self_checker(numpy.array([1,2]), numpy.array([3,4]), "test.png")
    print()
    self_checker(numpy.array([1,2,3,4]), numpy.array([-1,-1,-1,-1]), "test.png")